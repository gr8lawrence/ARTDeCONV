// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mu_P_cpp
arma::mat mu_P_cpp(const arma::mat Y, const arma::mat Theta, const arma::vec s, const arma::vec meds, arma::mat P, const double beta, const arma::vec wt);
RcppExport SEXP _ARTdeConv_mu_P_cpp(SEXP YSEXP, SEXP ThetaSEXP, SEXP sSEXP, SEXP medsSEXP, SEXP PSEXP, SEXP betaSEXP, SEXP wtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type meds(medsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type wt(wtSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_P_cpp(Y, Theta, s, meds, P, beta, wt));
    return rcpp_result_gen;
END_RCPP
}
// mu_Theta_cpp
arma::mat mu_Theta_cpp(const arma::mat Y, const arma::vec s, const arma::mat P, const arma::mat Theta_0, const arma::mat Delta, const arma::mat Delta_c, arma::mat Theta, const double alpha1, const double alpha2);
RcppExport SEXP _ARTdeConv_mu_Theta_cpp(SEXP YSEXP, SEXP sSEXP, SEXP PSEXP, SEXP Theta_0SEXP, SEXP DeltaSEXP, SEXP Delta_cSEXP, SEXP ThetaSEXP, SEXP alpha1SEXP, SEXP alpha2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Theta_0(Theta_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Delta_c(Delta_cSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha2(alpha2SEXP);
    rcpp_result_gen = Rcpp::wrap(mu_Theta_cpp(Y, s, P, Theta_0, Delta, Delta_c, Theta, alpha1, alpha2));
    return rcpp_result_gen;
END_RCPP
}
// mu_s_cpp
arma::vec mu_s_cpp(const arma::mat Y, const arma::mat Theta, arma::vec s, const arma::mat P);
RcppExport SEXP _ARTdeConv_mu_s_cpp(SEXP YSEXP, SEXP ThetaSEXP, SEXP sSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_s_cpp(Y, Theta, s, P));
    return rcpp_result_gen;
END_RCPP
}
// get_Delta_cpp
arma::mat get_Delta_cpp(const int k, const int k0, const int m, const int m0);
RcppExport SEXP _ARTdeConv_get_Delta_cpp(SEXP kSEXP, SEXP k0SEXP, SEXP mSEXP, SEXP m0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type m0(m0SEXP);
    rcpp_result_gen = Rcpp::wrap(get_Delta_cpp(k, k0, m, m0));
    return rcpp_result_gen;
END_RCPP
}
// get_Delta_c_cpp
arma::mat get_Delta_c_cpp(const arma::mat Delta);
RcppExport SEXP _ARTdeConv_get_Delta_c_cpp(SEXP DeltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Delta(DeltaSEXP);
    rcpp_result_gen = Rcpp::wrap(get_Delta_c_cpp(Delta));
    return rcpp_result_gen;
END_RCPP
}
// obj_fun_cpp
double obj_fun_cpp(const arma::mat Y, const arma::mat Y_hat, const arma::mat Theta_hat, const arma::mat P_hat, const int m0, const int k0, const arma::mat Theta_0, const arma::mat Delta, const arma::mat Delta_c, const arma::vec meds, const arma::vec ranges, const double alpha_1, const double alpha_2, const double beta);
RcppExport SEXP _ARTdeConv_obj_fun_cpp(SEXP YSEXP, SEXP Y_hatSEXP, SEXP Theta_hatSEXP, SEXP P_hatSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP Theta_0SEXP, SEXP DeltaSEXP, SEXP Delta_cSEXP, SEXP medsSEXP, SEXP rangesSEXP, SEXP alpha_1SEXP, SEXP alpha_2SEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Y_hat(Y_hatSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Theta_hat(Theta_hatSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P_hat(P_hatSEXP);
    Rcpp::traits::input_parameter< const int >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< const int >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Theta_0(Theta_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Delta_c(Delta_cSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type meds(medsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ranges(rangesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_1(alpha_1SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha_2(alpha_2SEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(obj_fun_cpp(Y, Y_hat, Theta_hat, P_hat, m0, k0, Theta_0, Delta, Delta_c, meds, ranges, alpha_1, alpha_2, beta));
    return rcpp_result_gen;
END_RCPP
}
// artdeconv_single_solve_cpp
Rcpp::List artdeconv_single_solve_cpp(const arma::mat Y, const arma::mat Theta_0, const arma::mat Theta_it, const arma::vec s_it, const arma::mat P_it, const int m0, const int k0, const arma::vec meds, const arma::vec ranges, const double alpha1, const double alpha2, const double beta, const int max_iter, const double tol);
RcppExport SEXP _ARTdeConv_artdeconv_single_solve_cpp(SEXP YSEXP, SEXP Theta_0SEXP, SEXP Theta_itSEXP, SEXP s_itSEXP, SEXP P_itSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP medsSEXP, SEXP rangesSEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP betaSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Theta_0(Theta_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Theta_it(Theta_itSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type s_it(s_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P_it(P_itSEXP);
    Rcpp::traits::input_parameter< const int >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< const int >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type meds(medsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ranges(rangesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(artdeconv_single_solve_cpp(Y, Theta_0, Theta_it, s_it, P_it, m0, k0, meds, ranges, alpha1, alpha2, beta, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// artdeconv_single_solve_s_fixed_cpp
Rcpp::List artdeconv_single_solve_s_fixed_cpp(const arma::mat Y, const arma::mat Theta_0, const arma::mat Theta_it, const arma::mat P_it, const int m0, const int k0, const arma::vec meds, const arma::vec ranges, const double alpha1, const double alpha2, const double beta, const int max_iter, const double tol);
RcppExport SEXP _ARTdeConv_artdeconv_single_solve_s_fixed_cpp(SEXP YSEXP, SEXP Theta_0SEXP, SEXP Theta_itSEXP, SEXP P_itSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP medsSEXP, SEXP rangesSEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP betaSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Theta_0(Theta_0SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Theta_it(Theta_itSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P_it(P_itSEXP);
    Rcpp::traits::input_parameter< const int >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< const int >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type meds(medsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ranges(rangesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< const double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(artdeconv_single_solve_s_fixed_cpp(Y, Theta_0, Theta_it, P_it, m0, k0, meds, ranges, alpha1, alpha2, beta, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ARTdeConv_mu_P_cpp", (DL_FUNC) &_ARTdeConv_mu_P_cpp, 7},
    {"_ARTdeConv_mu_Theta_cpp", (DL_FUNC) &_ARTdeConv_mu_Theta_cpp, 9},
    {"_ARTdeConv_mu_s_cpp", (DL_FUNC) &_ARTdeConv_mu_s_cpp, 4},
    {"_ARTdeConv_get_Delta_cpp", (DL_FUNC) &_ARTdeConv_get_Delta_cpp, 4},
    {"_ARTdeConv_get_Delta_c_cpp", (DL_FUNC) &_ARTdeConv_get_Delta_c_cpp, 1},
    {"_ARTdeConv_obj_fun_cpp", (DL_FUNC) &_ARTdeConv_obj_fun_cpp, 14},
    {"_ARTdeConv_artdeconv_single_solve_cpp", (DL_FUNC) &_ARTdeConv_artdeconv_single_solve_cpp, 14},
    {"_ARTdeConv_artdeconv_single_solve_s_fixed_cpp", (DL_FUNC) &_ARTdeConv_artdeconv_single_solve_s_fixed_cpp, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_ARTdeConv(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
